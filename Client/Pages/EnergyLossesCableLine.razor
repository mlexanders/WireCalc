@page "/EnergyLossesCableLine"
@using WireCalc.Client.Definitions


<RadzenTemplateForm Data="@_model" Submit="@((EnergyLossesViewModel args) => { Submit(args);})">
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="8">
            <RadzenFieldset Text="@_text">
                <RadzenStack Gap="1rem">

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenLabel Text="Активная мощность (P, кВт):" Component="P"/>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenNumeric ShowUpDown="false" TValue="double?" @bind-Value="@_model.P"></RadzenNumeric>
                        </RadzenColumn>
                    </RadzenRow>


                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenLabel Text="Реактивная мощность (Q, квар):" Component="Q"/>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenNumeric ShowUpDown="false" TValue="double?" @bind-Value="_model.Q"></RadzenNumeric>
                        </RadzenColumn>
                    </RadzenRow>


                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenLabel Text="Номинальное напряжение (U, кВ):" Component="U"/>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenNumeric ShowUpDown="false" TValue="double?" @bind-Value="_model.V"></RadzenNumeric>
                        </RadzenColumn>
                    </RadzenRow>
                    
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenLabel Text="Активное сопротивление (r, Ом):" Component="R"/>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenNumeric ShowUpDown="false" TValue="double?" @bind-Value="_model.R"></RadzenNumeric>
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenLabel Text="Число часов использования максимальной нагрузки (Tм, ч) " Component="Tm"/>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenNumeric ShowUpDown="false" TValue="double?" @bind-Value="_model.Tm"></RadzenNumeric>
                        </RadzenColumn>
                    </RadzenRow>
                    
                    
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="6" SizeMD="8">
                            <RadzenLabel Text="Потери энергии составят:" Component="L"/>
                        </RadzenColumn>
                        <RadzenColumn Size="5" SizeMD="4">
                            @($"{_result} кВт * ч")
                        </RadzenColumn>
                    </RadzenRow>

                </RadzenStack>
            </RadzenFieldset>
        </RadzenColumn>
    </RadzenRow>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Расчет"/>
    </RadzenStack>
</RadzenTemplateForm>



@code {

    private class EnergyLossesViewModel
    {
        public double? P { get; set; }
        public double? Q { get; set; }
        public double? V { get; set; }
        public double? R { get; set; }
        public double? Tm { get; set; }
    }

    private EnergyLossesViewModel _model = new ();
    private string _text;
    private double _result;

    [Parameter, SupplyParameterFromQuery]
    public int CableLineTypeParam { get; set; }
    private CableLineType CableLineType => (CableLineType)CableLineTypeParam;


    protected override async Task OnInitializedAsync() => SetWires();

    protected override void OnParametersSet() => SetWires();

    private void SetWires()
    {
        if (CableLineType is CableLineType.CableLine)
        {
            // _wires = WireRepository.WiresFromCableLine;
            _text = "Рассчет потери энергии КЛ";
        }
        else if (CableLineType is CableLineType.AirLine)
        {
            // _wires = WireRepository.WiresFromAirLine;
            _text = "Рассчет потери энергии ВЛ";
        }

        _result = 0;
    }

    private void Submit(EnergyLossesViewModel args)
    {
        const int a = 12 / 1;
       
        var P = Math.Pow(_model?.P ?? 0, 2);
        var Q = Math.Pow(_model?.Q ?? 0, 2);
        var V = Math.Pow(_model?.V ?? 0, 2);

        var ch = Math.Pow((0.124 + (_model?.Tm / 10000.0)) ?? 0, 2) * 8760;
        
        var S = ((P + Q) / V) * ch * (_model?.R ?? 0);
        _result = Math.Round(S, 3);
    }
}