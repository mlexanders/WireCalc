@page "/cableLine"
@using WireCalc.Client.Models
@using WireCalc.Client.Repository
@using WireCalc.Client.Components
@inject WireRepository WireRepository 


<h3>Расчет параметров схемы замещения - Кабельная линия</h3>

<div class="mt-4 mb-2 row">
    <div class="col col 4">
        <CascadingValue Value="@Wires" Name="WireSet">
            <CascadingValue Value="@wire" Name="Wire">
                <WireSelect></WireSelect>
            </CascadingValue>
        </CascadingValue>
    </div>
</div>

<div class="mb-2 row">
    <div class="col col-4 text-align-center">
        <h5>Длина провода (км): </h5>
        <RadzenNumeric ShowUpDown="false" TValue="int?" @bind-Value="@value" Placeholder="Введите длину провода" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "enter value" } })"/>
    </div>
</div>

<div class="mb-2 row">
    <div class="col col-4 m2">
        <RadzenButton Style="width:150px" Text="Расчет" Click="Process"></RadzenButton>
    </div>
</div>


<div class="mb-2 row">
    <div class="col col-4 ">
        <h5>Активное сопротивление(r):</h5>
    </div>

    <div class="col col-3 ">
        <h5>@result1 Ом</h5>
    </div>
</div>

@* <div class="mb-2 row"> *@
@*     <div class="col col-4 "> *@
@*         <h5>Индуктивное сопротивление(x):</h5> *@
@*     </div> *@
@* *@
@*     <div class="col col-3 "> *@
@*         <h5>@result2 Ом</h5> *@
@*     </div> *@
@* </div> *@


@code {
    int? value;
    double? result1;
    double? result2;

    public Wire wire = new();

    public List<Wire> Wires;

    protected override void OnInitialized()
    {
        Wires = WireRepository.WiresFromCableLine;
        base.OnInitialized();
    }

    private void Process()
    {
        result1 = Math.Round(wire.ActiveResistance * value ?? 0, 3);
        result2 = Math.Round(wire.InductivityResistance * value ?? 0, 3);
        StateHasChanged();
    }

}